import type { Metadata } from "next"

export interface SEOConfig {
  title: string
  description: string
  url?: string
  images?: string[]
  type?: "website" | "article" | "profile"
  publishedTime?: string
  modifiedTime?: string
  authors?: string[]
  tags?: string[]
  keywords?: string[]
  section?: string
  locale?: string
}

const siteConfig = {
  name: "Rafadlis | Crafter",
  description:
    "Personal portfolio website of R. Rahmat Fadli Sadikin - Software Engineer, UX Designer, and Digital Crafter. Showcasing projects, thoughts, and expertise in web development, data science, and design.",
  url: "https://rafadlis.space",
  ogImage: "/opengraph-image", // Dynamic OG image generated by Next.js
  author: {
    name: "R. Rahmat Fadli Sadikin",
    twitter: "@rafadlis",
    url: "https://rafadlis.space",
  },
}

export function generateMetadata({
  title,
  description,
  url = siteConfig.url,
  images = [siteConfig.ogImage],
  type = "website",
  publishedTime,
  modifiedTime,
  authors = [siteConfig.author.name],
  tags,
  keywords,
  section,
  locale = "en_US",
}: SEOConfig): Metadata {
  const fullTitle =
    title === siteConfig.name ? title : `${title} | ${siteConfig.name}`
  const canonicalUrl = url.startsWith("http") ? url : `${siteConfig.url}${url}`

  const metadata: Metadata = {
    title: fullTitle,
    description,
    keywords: keywords?.join(", "),
    authors: authors.map((author) => ({ name: author })),
    openGraph: {
      type,
      locale,
      url: canonicalUrl,
      title: fullTitle,
      description,
      siteName: siteConfig.name,
      images: images.map((image) => ({
        url: image.startsWith("http") ? image : `${siteConfig.url}${image}`,
        width: 1200,
        height: 630,
        alt: title,
        type: "image/jpeg",
      })),
    },
    twitter: {
      card: "summary_large_image",
      title: fullTitle,
      description,
      images: images.map((image) =>
        image.startsWith("http") ? image : `${siteConfig.url}${image}`
      ),
      creator: siteConfig.author.twitter,
      site: siteConfig.author.twitter,
    },
    alternates: {
      canonical: canonicalUrl,
    },
  }

  // Add article-specific metadata
  if (type === "article") {
    metadata.openGraph = {
      ...metadata.openGraph,
      type: "article",
      publishedTime,
      modifiedTime,
      authors: authors,
      tags,
      section,
    }
  }

  return metadata
}

export function generateBlogPostMetadata({
  title,
  description,
  slug,
  publishedAt,
  updatedAt,
  category,
  tags = [],
  excerpt,
  image,
  authors = [siteConfig.author.name],
}: {
  title: string
  description?: string
  slug: string
  publishedAt: Date
  updatedAt?: Date
  category: string
  tags?: string[]
  excerpt?: string
  image?: string
  authors?: string[]
}): Metadata {
  const url = `/blog/${slug}`
  // Dynamic OG image will be generated by opengraph-image.tsx
  const blogImage = image || `${siteConfig.url}/blog/${slug}/opengraph-image`

  return generateMetadata({
    title,
    description:
      description ||
      excerpt ||
      `Read about ${title} on Rafadlis blog. Insights on ${category} and more.`,
    url,
    images: [blogImage],
    type: "article",
    publishedTime: publishedAt.toISOString(),
    modifiedTime: updatedAt?.toISOString() || publishedAt.toISOString(),
    authors,
    tags: [...tags, category],
    keywords: [title, category, ...tags, "blog", "tutorial", "tech"],
    section: category,
  })
}

export function generateProjectMetadata({
  title,
  description,
  slug,
  technologies = [],
  image,
}: {
  title: string
  description: string
  slug: string
  technologies?: string[]
  image?: string
}): Metadata {
  const url = `/project/${slug}`
  // Dynamic OG image will be generated by opengraph-image.tsx
  const projectImage =
    image || `${siteConfig.url}/project/${slug}/opengraph-image`

  return generateMetadata({
    title,
    description,
    url,
    images: [projectImage],
    type: "article",
    keywords: [title, ...technologies, "project", "portfolio", "development"],
    tags: technologies,
  })
}

export function generatePageMetadata({
  title,
  description,
  path = "",
  image,
}: {
  title: string
  description: string
  path?: string
  image?: string
}): Metadata {
  return generateMetadata({
    title,
    description,
    url: path,
    images: image ? [image] : undefined,
  })
}

// JSON-LD structured data generators
export function generateWebsiteStructuredData() {
  return {
    "@context": "https://schema.org",
    "@type": "WebSite",
    name: siteConfig.name,
    description: siteConfig.description,
    url: siteConfig.url,
    author: {
      "@type": "Person",
      name: siteConfig.author.name,
      url: siteConfig.author.url,
    },
    sameAs: [
      "https://github.com/rafadlis",
      "https://linkedin.com/in/rafadlis",
      "https://twitter.com/rafadlis",
      "https://instagram.com/rafadlis",
    ],
  }
}

export function generatePersonStructuredData() {
  return {
    "@context": "https://schema.org",
    "@type": "Person",
    name: siteConfig.author.name,
    url: siteConfig.author.url,
    image: "https://github.com/rafadlis.png",
    jobTitle: "Software Engineer & UX Designer",
    worksFor: {
      "@type": "Organization",
      name: "Freelancer",
    },
    alumniOf: "University",
    knowsAbout: [
      "Software Engineering",
      "UX Design",
      "Web Development",
      "Data Science",
      "Next.js",
      "React",
      "TypeScript",
    ],
    sameAs: [
      "https://github.com/rafadlis",
      "https://linkedin.com/in/rafadlis",
      "https://twitter.com/rafadlis",
      "https://instagram.com/rafadlis",
    ],
  }
}

export function generateBlogPostStructuredData({
  title,
  description,
  slug,
  publishedAt,
  updatedAt,
  image,
  category,
  tags = [],
}: {
  title: string
  description: string
  slug: string
  publishedAt: Date
  updatedAt?: Date
  image?: string
  category: string
  tags?: string[]
}) {
  const url = `${siteConfig.url}/blog/${slug}`
  // Dynamic OG image will be generated by opengraph-image.tsx
  const articleImage = image || `${siteConfig.url}/blog/${slug}/opengraph-image`

  return {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    headline: title,
    description: description,
    image: articleImage,
    url: url,
    datePublished: publishedAt.toISOString(),
    dateModified: (updatedAt || publishedAt).toISOString(),
    author: {
      "@type": "Person",
      name: siteConfig.author.name,
      url: siteConfig.author.url,
    },
    publisher: {
      "@type": "Person",
      name: siteConfig.author.name,
      logo: {
        "@type": "ImageObject",
        url: "https://github.com/rafadlis.png",
      },
    },
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": url,
    },
    articleSection: category,
    keywords: [title, category, ...tags].join(", "),
    inLanguage: "en-US",
  }
}
